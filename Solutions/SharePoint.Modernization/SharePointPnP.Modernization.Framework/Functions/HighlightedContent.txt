https://onedrive.visualstudio.com/SPPPlat/SPPPlat%20Team/_search?text=FSObjType&type=code&filters=ProjectFilters%7BSPPPlat%7DRepositoryFilters%7Bsp-client%7D&lp=code-Team&result=DefaultCollection%2FSPPPlat%2Fsp-client%2FGBmaster%2F%2Flibraries%2Fsp-dataproviders%2Fsrc%2FdataProviders%2Flist%2FCAMLQueryBuilder.ts&_a=contents


export interface IDynamicDependencyWebPartProp {
  /*
   * Component id of the layout selected for the web part.
   * Web part will need this layout component to be loaded before rendering itself.
   */
  layoutComponentId?: string;

  /**
   * Component id of the data provider web part will depend upon.
   * Web part will need this data provider component to be loaded before rendering the data.
   */
  dataProviderComponentId?: string;
}
====
export interface IBaseCollectionWebPartProperties extends IDynamicDependencyWebPartProp {
  // Set when there are more than one layouts to indicate which layout is in use.
  layoutId?: string;

  // Set when there are more than one data providers to indicate which data provider is in use.
  dataProviderId?: string;

  title?: string;
  addToPageScreenReaderLabel?: string;
  hideWebPartWhenEmpty?: boolean;

  // These properties are set in BaseCollectionWebPart onInit
  webId?: string;
  siteId?: string;
  baseUrl?: string; // base url to locate web part resources such has file icons
}

====

interface IContentRollupWebPartProperties extends IBaseCollectionWebPartProperties {

  // search properties
  query?: ISearchQuery;

  // property pane edited display maps in JSON format
  displayMaps?: { [templateId: number]: { [target: string]: IDisplayField } };

  response?: IContent[]; // used for rendering but not serialized

  // list/file data source specific properties
  listId?: string; // selected list to view the contents of
  lastListId?: string; // used to detect list view selection changes
  listTitle?: string; // selected document library to view the contents of
  isDefaultDocumentLibrary?: boolean;
  documentLibrarySortField?: string;
  caml?: string;

  // layout properties
  templateId?: ContentRollupLayout;
  maxItemsPerPage?: number;
  isSeeAllPage?: boolean;

  // property pane properties
  isAdvancedFilterMode?: boolean;

  /**
   * The list of sites metadata added by user as content source.
   */
  sites?: ISiteMetadata[];
}

===========
export interface IDisplayField {
  // applicable to a MappedField but not a CalculatedField
  sources?: string[];

  // fields applicable to list layout
  heading?: string;    // defaults to none
  linkUrls?: string[]; // defaults to none
  width?: number;      // defaults to 100
}

=============
templateId = 
enum ContentRollupLayout {
  Card = 1,
  List = 2,
  Carousel = 3,
  FilmStrip = 4,
  Masonry = 5,
  Custom = 999
}

============
export interface ISearchQuery {
  advancedQueryText?: string;
  contentLocation?: ContentLocation;  // search scope
  contentType?: ContentType;          // single content type value for backward compatibility
  contentTypes?: ContentType[];       // content types to include in query result
  documentTypes?: DocumentType[];
  filters?: ISearchQueryFilter[];
  sortField?: string;
  sortFieldMatchText?: string;
  sortType?: SortType;
  lastSortFieldMatchText?: string;
  managedPropertiesRefinerOptions?: IManagedPropertiesRefinerOptions;
}

export const enum ContentLocation {
  CurrentSite = 1,
  CurrentSiteCollection = 2,
  AllSites = 3,
  CurrentSiteDocumentLibrary = 4,
  AllSitesInTheHub = 5,
  CurrentSitePageLibrary = 6,
  SelectedSites = 99
}

export const enum ContentType {
  Document = 1,
  Page = 2,
  Video = 3,
  Event = 4,
  Issue = 5,
  Task = 6,
  Link = 7,
  Contact = 8,
  Image = 9,
  News = 10,
  All = 99
}

export const enum SortType {
  MostRecent = 1,
  MostViewed = 2,
  Trending = 3,
  FieldAscending = 4,
  FieldDescending = 5
}

export const enum DocumentType {
  Word = 1,
  Excel = 2,
  PowerPoint = 3,
  OneNote = 4,
  Visio = 5,
  PDF = 10,
  Any = 99
}

export interface ISearchQueryFilter {
  filterType?: FilterType;
  userType?: UserType;
  fieldNameMatchText?: string;
  lastFieldNameMatchText?: string;
  fieldname?: string;
  op?: FilterOperator;
  value?: number | string | Date | boolean;
  value2?: number | string | Date | boolean;
  values?: (number | string | Date | boolean)[];
}

export const enum FilterType {
  TitleContaining = 1,            // title like "*value*"
  AnyTextContaining = 2,          // any field like "*value*
  TaggedWith = 3,                 // value in list (tags)
  CreatedBy = 4,                  // created by = value
  ModifiedBy = 5,                 // created by = value
  Field = 6,                      // field operator value(s)
  RecentlyChanged = 7,
  RecentlyAdded = 8
}

export const enum UserType {
  /**
   * Indicates user is the current session user.
   */
  CurrentUser = 1,

  /**
   * Indicates user is who match the given match text (e.g. name).
   */
  SpecificUser = 2
}

export const enum FilterOperator {
  Equals = 1,
  NotEqual = 2,
  BeginsWith = 3,
  EndsWith = 4,
  Contains = 5,
  DoesNotContain = 6,
  LessThan = 7,
  GreaterThan = 8,
  Between = 9
}

export interface IManagedPropertiesRefinerOptions {
  /**
   * How many unique managed properties to return.
   */
  limit?: number;

  /**
   * Text to filter managed properties by name.
   */
  managedPropertyMatchText: string;
}
============

export interface ISiteMetadata extends IDataRow {
  /**
   * The acronym of the site. Used in banner image if the banner image url is not available.
   */
  Acronym: string;

  /**
   * Site title.
   */
  Title: string;

  /**
   * The color represents the site theme.
   */
  BannerColor: string;

  /**
   * The url of the site logo.
   */
  BannerImageUrl?: string;

  /**
   * The url points to the site.
   */
  Url: string;

  /**
   * Type of the site. E.g. 'Site', 'Group'.
   */
  Type: string;

  /**
   * Identifiers of the site.
   */
  ItemReference: ISiteReference;
}

export interface IDataRow {
  [fieldName: string]: Object | undefined;
}


// @todo We may need GroupId field in the future since the result from SP Home API has it.
export interface ISiteReference {
  SiteId: string;
  WebId: string;
  Type: 'SiteReference' | 'GroupReference' | string;
  IndexId: number;

  /**
   * The id of the group when site reference type is 'GroupReference'.
   * It's not available for other site reference types.
   */
  GroupId?: string;
}

========================